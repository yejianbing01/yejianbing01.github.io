{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1602659804450},{"_id":"source/_posts/allure学习笔记.md","hash":"0a62231fa444f4751cd87265d81f5933cbd0450e","modified":1602660875910},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602661647923},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1602661647916},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1602661647916},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1602661647916},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1602661647916},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1602661647917},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1602661647916},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1602661647917},{"_id":"themes/yilia/_config.yml","hash":"c3a1694c111e2e1f05a174bd893fe951038fbda2","modified":1602661647917},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1602661647924},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1602661647917},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1602661647938},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1602661647917},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1602661647917},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1602661647918},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1602661647918},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1602661647918},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1602661647918},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1602661647923},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1602661647923},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1602661647923},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1602661647923},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1602661647923},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1602661647924},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1602661647924},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1602661647935},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1602661647924},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1602661647938},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1602661647918},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1602661647918},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1602661647918},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1602661647919},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1602661647933},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1602661647919},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1602661647919},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1602661647919},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1602661647919},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1602661647919},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1602661647919},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1602661647919},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1602661647919},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1602661647920},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1602661647920},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1602661647923},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1602661647923},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1602661647933},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1602661647933},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1602661647934},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1602661647934},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1602661647934},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1602661647934},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1602661647934},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1602661647934},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1602661647924},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1602661647934},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1602661647924},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1602661647924},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1602661647925},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1602661647924},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1602661647925},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1602661647925},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1602661647925},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1602661647925},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1602661647926},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1602661647928},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1602661647928},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1602661647928},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1602661647929},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1602661647928},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1602661647929},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1602661647929},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1602661647930},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1602661647929},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1602661647930},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1602661647930},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1602661647930},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1602661647930},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1602661647930},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1602661647930},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1602661647930},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1602661647931},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1602661647931},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1602661647931},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1602661647931},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1602661647932},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1602661647932},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1602661647932},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1602661647932},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1602661647932},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1602661647932},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1602661647933},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1602661647933},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1602661647932},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1602661647920},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1602661647920},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1602661647920},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1602661647921},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1602661647920},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1602661647921},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1602661647921},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1602661647921},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1602661647921},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1602661647925},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1602661647921},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1602661647925},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1602661647926},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1602661647926},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1602661647926},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1602661647927},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1602661647927},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1602661647928},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1602661647929},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1602661647928},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1602661647929},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1602661647929},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1602661647937},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1602661647937},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1602661647923},{"_id":"public/2020/10/14/allure学习笔记/index.html","hash":"ea5d8dc1cbce12ea54637ff7ebf2ea20bb463b84","modified":1602664286874},{"_id":"public/2020/10/14/hello-world/index.html","hash":"a2eaba6d04c42716cf50897427c0caf9cd483eb5","modified":1602663152270},{"_id":"public/archives/index.html","hash":"ef5fdd27aaa3fc7735b8a102b470abfc129c2fcd","modified":1602664286874},{"_id":"public/archives/2020/index.html","hash":"2b0ec345c8cb1771ea42fe1c8a78fe897cd3c473","modified":1602664286874},{"_id":"public/archives/2020/10/index.html","hash":"d63f823562f51a0a993af9f538d85915552737fb","modified":1602664286874},{"_id":"public/index.html","hash":"539c202fdc49e9a3e40f6e4dab0c7e0a0fcd266e","modified":1602664286874},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1602663152270},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1602663152270},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1602663152270},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1602663152270},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1602663152270},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1602663152270},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1602663152270},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1602663152270},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1602663152270},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1602663152270},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1602663152270},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1602663152270},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1602663152270},{"_id":"source/_posts/jenkins环境搭建.md","hash":"8c0ca55ebe4746b1bffca615aa29e5e7e9c09c45","modified":1602664088591},{"_id":"public/2020/10/14/jenkins环境搭建/index.html","hash":"b8159eb444bc69bef4c294c20ec7809026a6f610","modified":1602664286874}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"allure学习笔记","date":"2020-10-14T07:33:57.000Z","_content":"\n# Allure\n\n## Allure-pytest\n\n+ 生成 allure 结果目录('--alluredir','../report/allure')\n+ 生成 allure 报告\n  - 安装 allure 服务('brew install allure')\n  - allure generate ./reportallure -o ./allureReport --clean (reportallure是alluredir生成的xml目录，allureReport是最终生成html的目录)\n  - allure serve ./allureReport (运行后，浏览器会自动跳转到allure report界面)\n+ [pytest+allure+jenkins集成](https://www.cnblogs.com/hao2018/p/11135180.html)\n\n### allure-pytest 定制化报告\n\n1. parent_suite 最上层测试套\n\n    ```python\n    @allure.parent_suite('xxxx')\n    ```\n\n2. suite 测试套\n\n    ```python\n    @allure.suite('xxxx')\n    ```\n\n3. sub_suite 下层测试套\n\n    ```python\n    @allure.sub_suite('xxxx')\n    ```\n\n4. title 下层测试套\n\n    ```python\n    @allure.title('xxxx')\n    ```\n\n    ![1,2,3,4](./suite.png)\n5. feature 标注主要功能模块\n\n    ```python\n    @allure.feature('xxxx')\n    ```\n\n    ![5](./feature.png)\n6. story 标注Features功能模块下的分支功能\n\n    ```python\n    @allure.story('xxxx')\n    ```\n\n7. severity 标注测试用例的重要级别 (图表优先级)\n    + blocker级别：中断缺陷（客户端程序无响应，无法执行下一步操作）\n    + critical级别：临界缺陷（功能点缺失）\n    + normal级别：正常    默认为这个级别\n    + minor级别：次要缺陷（界面错误与UI需求不符）\n    + trivial级别：轻微缺陷（必输项无提示，或者提示不规范\n\n    ```python\n    @allure.severity(\"trivial\")\n    ```\n\n8. with allure.step 分步骤备注\n\n    ```python\n    #@allure.step(\"这是两个整数的比较\")\n    def change_env(self, env_name):\n    \"\"\"\n    切换环境\n    :param env_name:\n    :return:\n    \"\"\"\n    with allure.step(f'切换环境到: {env_name}'):\n        self.click(By.XPATH, \"//*[contains(@text,'环境')]\")\n        log.info(\"点击切换环境\")\n        self.click(By.XPATH, f\"//*[@text='{env_name}']\")\n        log.info(f\"切换到:{env_name}\")\n    ```\n\n    ![8](./step.png)\n\n9. attach 用于向测试报告中输入一些附加的信息，通常是一些测试数据信息。\n\n    ```python\n    class Attach(object):\n        def __call__(self, body, name=None, attachment_type=None, extension=None):\n            plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)\n        def file(self, source, name=None, attachment_type=None, extension=None):\n            plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n    ```\n\n    + name就是附件名称，body就是数据，attachment_type就是传类型\n    + 附件支持的类型（TEXT，HTML，XML，PNG，JPG，JSON，OTHER）\n    + 图片附件：\n\n        ```python\n        with open(r\"G:\\Web_automation\\Learn_pytest\\test_cases\\img\\2.jpg\",\"rb\") as file:\n            file=file.read()\n            allure.attach(file,\"预期结果\",attachment_type=allure.attachment_type.JPG)\n        ```\n\n10. issue和testcase 添加链接\n\n    ```python\n    @allure.testcase(\"https://home.cnblogs.com/\",\"测试用例地址请点击跳转\")  # 标记代码，你可以指定连接的名字，报告里面就会现在这个名字的连接\n    @allure.issue(\"http://www.baidu.com\")  # 标记代码，哪个写在后，在报告里面就会显示在前面\n    ```\n\n11. description 和 description_html\n\n    ```python\n    @allure.description('xxxx')\n    @allure.description_html('xxxx')\n    ```\n\n## mocha-allure-reporter\n\n+ 安装依赖包：npm install mocha-allure-reporter\n+ 生成 allure 结果 mocha --reporter mocha-allure-reporter\n+ 生成 allure 报告\n  - 安装 allure 服务('brew install allure')\n  - allure generate ./allure-results -o ./allureReport --clean\n  - allure serve ./allureReport\n\n## allure --help\n\nUsage: allure [options] [command] [command options]\n  Options:\n    --help\n      Print commandline help.\n    -q, --quiet\n      Switch on the quiet mode.\n      Default: false\n    -v, --verbose\n      Switch on the verbose mode.\n      Default: false\n    --version\n      Print commandline version.\n      Default: false\n  Commands:\n    generate      Generate the report\n      Usage: generate [options] The directories with allure results\n        Options:\n          -c, --clean\n            Clean Allure report directory before generating a new one.\n            Default: false\n          --config\n            Allure commandline config path. If specified overrides values from\n            --profile and --configDirectory.\n          --configDirectory\n            Allure commandline configurations directory. By default uses\n            ALLURE_HOME directory.\n          --profile\n            Allure commandline configuration profile.\n          -o, --report-dir, --output\n            The directory to generate Allure report into.\n            Default: allure-report\n\n    serve      Serve the report\n      Usage: serve [options] The directories with allure results\n        Options:\n          --config\n            Allure commandline config path. If specified overrides values from \n            --profile and --configDirectory.\n          --configDirectory\n            Allure commandline configurations directory. By default uses \n            ALLURE_HOME directory.\n          -h, --host\n            This host will be used to start web server for the report.\n          -p, --port\n            This port will be used to start web server for the report.\n            Default: 0\n          --profile\n            Allure commandline configuration profile.\n\n    open      Open generated report\n      Usage: open [options] The report directory\n        Options:\n          -h, --host\n            This host will be used to start web server for the report.\n          -p, --port\n            This port will be used to start web server for the report.\n            Default: 0\n\n    plugin      Generate the report\n      Usage: plugin [options]\n        Options:\n          --config\n            Allure commandline config path. If specified overrides values from \n            --profile and --configDirectory.\n          --configDirectory\n            Allure commandline configurations directory. By default uses \n            ALLURE_HOME directory.\n          --profile\n            Allure commandline configuration profile.\n\n","source":"_posts/allure学习笔记.md","raw":"---\ntitle: allure学习笔记\ndate: 2020-10-14 15:33:57\ntags:\n---\n\n# Allure\n\n## Allure-pytest\n\n+ 生成 allure 结果目录('--alluredir','../report/allure')\n+ 生成 allure 报告\n  - 安装 allure 服务('brew install allure')\n  - allure generate ./reportallure -o ./allureReport --clean (reportallure是alluredir生成的xml目录，allureReport是最终生成html的目录)\n  - allure serve ./allureReport (运行后，浏览器会自动跳转到allure report界面)\n+ [pytest+allure+jenkins集成](https://www.cnblogs.com/hao2018/p/11135180.html)\n\n### allure-pytest 定制化报告\n\n1. parent_suite 最上层测试套\n\n    ```python\n    @allure.parent_suite('xxxx')\n    ```\n\n2. suite 测试套\n\n    ```python\n    @allure.suite('xxxx')\n    ```\n\n3. sub_suite 下层测试套\n\n    ```python\n    @allure.sub_suite('xxxx')\n    ```\n\n4. title 下层测试套\n\n    ```python\n    @allure.title('xxxx')\n    ```\n\n    ![1,2,3,4](./suite.png)\n5. feature 标注主要功能模块\n\n    ```python\n    @allure.feature('xxxx')\n    ```\n\n    ![5](./feature.png)\n6. story 标注Features功能模块下的分支功能\n\n    ```python\n    @allure.story('xxxx')\n    ```\n\n7. severity 标注测试用例的重要级别 (图表优先级)\n    + blocker级别：中断缺陷（客户端程序无响应，无法执行下一步操作）\n    + critical级别：临界缺陷（功能点缺失）\n    + normal级别：正常    默认为这个级别\n    + minor级别：次要缺陷（界面错误与UI需求不符）\n    + trivial级别：轻微缺陷（必输项无提示，或者提示不规范\n\n    ```python\n    @allure.severity(\"trivial\")\n    ```\n\n8. with allure.step 分步骤备注\n\n    ```python\n    #@allure.step(\"这是两个整数的比较\")\n    def change_env(self, env_name):\n    \"\"\"\n    切换环境\n    :param env_name:\n    :return:\n    \"\"\"\n    with allure.step(f'切换环境到: {env_name}'):\n        self.click(By.XPATH, \"//*[contains(@text,'环境')]\")\n        log.info(\"点击切换环境\")\n        self.click(By.XPATH, f\"//*[@text='{env_name}']\")\n        log.info(f\"切换到:{env_name}\")\n    ```\n\n    ![8](./step.png)\n\n9. attach 用于向测试报告中输入一些附加的信息，通常是一些测试数据信息。\n\n    ```python\n    class Attach(object):\n        def __call__(self, body, name=None, attachment_type=None, extension=None):\n            plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)\n        def file(self, source, name=None, attachment_type=None, extension=None):\n            plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n    ```\n\n    + name就是附件名称，body就是数据，attachment_type就是传类型\n    + 附件支持的类型（TEXT，HTML，XML，PNG，JPG，JSON，OTHER）\n    + 图片附件：\n\n        ```python\n        with open(r\"G:\\Web_automation\\Learn_pytest\\test_cases\\img\\2.jpg\",\"rb\") as file:\n            file=file.read()\n            allure.attach(file,\"预期结果\",attachment_type=allure.attachment_type.JPG)\n        ```\n\n10. issue和testcase 添加链接\n\n    ```python\n    @allure.testcase(\"https://home.cnblogs.com/\",\"测试用例地址请点击跳转\")  # 标记代码，你可以指定连接的名字，报告里面就会现在这个名字的连接\n    @allure.issue(\"http://www.baidu.com\")  # 标记代码，哪个写在后，在报告里面就会显示在前面\n    ```\n\n11. description 和 description_html\n\n    ```python\n    @allure.description('xxxx')\n    @allure.description_html('xxxx')\n    ```\n\n## mocha-allure-reporter\n\n+ 安装依赖包：npm install mocha-allure-reporter\n+ 生成 allure 结果 mocha --reporter mocha-allure-reporter\n+ 生成 allure 报告\n  - 安装 allure 服务('brew install allure')\n  - allure generate ./allure-results -o ./allureReport --clean\n  - allure serve ./allureReport\n\n## allure --help\n\nUsage: allure [options] [command] [command options]\n  Options:\n    --help\n      Print commandline help.\n    -q, --quiet\n      Switch on the quiet mode.\n      Default: false\n    -v, --verbose\n      Switch on the verbose mode.\n      Default: false\n    --version\n      Print commandline version.\n      Default: false\n  Commands:\n    generate      Generate the report\n      Usage: generate [options] The directories with allure results\n        Options:\n          -c, --clean\n            Clean Allure report directory before generating a new one.\n            Default: false\n          --config\n            Allure commandline config path. If specified overrides values from\n            --profile and --configDirectory.\n          --configDirectory\n            Allure commandline configurations directory. By default uses\n            ALLURE_HOME directory.\n          --profile\n            Allure commandline configuration profile.\n          -o, --report-dir, --output\n            The directory to generate Allure report into.\n            Default: allure-report\n\n    serve      Serve the report\n      Usage: serve [options] The directories with allure results\n        Options:\n          --config\n            Allure commandline config path. If specified overrides values from \n            --profile and --configDirectory.\n          --configDirectory\n            Allure commandline configurations directory. By default uses \n            ALLURE_HOME directory.\n          -h, --host\n            This host will be used to start web server for the report.\n          -p, --port\n            This port will be used to start web server for the report.\n            Default: 0\n          --profile\n            Allure commandline configuration profile.\n\n    open      Open generated report\n      Usage: open [options] The report directory\n        Options:\n          -h, --host\n            This host will be used to start web server for the report.\n          -p, --port\n            This port will be used to start web server for the report.\n            Default: 0\n\n    plugin      Generate the report\n      Usage: plugin [options]\n        Options:\n          --config\n            Allure commandline config path. If specified overrides values from \n            --profile and --configDirectory.\n          --configDirectory\n            Allure commandline configurations directory. By default uses \n            ALLURE_HOME directory.\n          --profile\n            Allure commandline configuration profile.\n\n","slug":"allure学习笔记","published":1,"updated":"2020-10-14T07:34:35.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg949ewl00003c9ecx79d36e","content":"<h1 id=\"Allure\"><a href=\"#Allure\" class=\"headerlink\" title=\"Allure\"></a>Allure</h1><h2 id=\"Allure-pytest\"><a href=\"#Allure-pytest\" class=\"headerlink\" title=\"Allure-pytest\"></a>Allure-pytest</h2><ul>\n<li>生成 allure 结果目录(‘–alluredir’,’../report/allure’)</li>\n<li>生成 allure 报告<ul>\n<li>安装 allure 服务(‘brew install allure’)</li>\n<li>allure generate ./reportallure -o ./allureReport –clean (reportallure是alluredir生成的xml目录，allureReport是最终生成html的目录)</li>\n<li>allure serve ./allureReport (运行后，浏览器会自动跳转到allure report界面)</li>\n</ul>\n</li>\n<li><a href=\"https://www.cnblogs.com/hao2018/p/11135180.html\">pytest+allure+jenkins集成</a></li>\n</ul>\n<h3 id=\"allure-pytest-定制化报告\"><a href=\"#allure-pytest-定制化报告\" class=\"headerlink\" title=\"allure-pytest 定制化报告\"></a>allure-pytest 定制化报告</h3><ol>\n<li><p>parent_suite 最上层测试套</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.parent_suite(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>suite 测试套</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.suite(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sub_suite 下层测试套</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.sub_suite(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>title 下层测试套</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.title(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"./suite.png\" alt=\"1,2,3,4\"></p>\n</li>\n<li><p>feature 标注主要功能模块</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.feature(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"./feature.png\" alt=\"5\"></p>\n</li>\n<li><p>story 标注Features功能模块下的分支功能</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.story(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>severity 标注测试用例的重要级别 (图表优先级)</p>\n<ul>\n<li><p>blocker级别：中断缺陷（客户端程序无响应，无法执行下一步操作）</p>\n</li>\n<li><p>critical级别：临界缺陷（功能点缺失）</p>\n</li>\n<li><p>normal级别：正常    默认为这个级别</p>\n</li>\n<li><p>minor级别：次要缺陷（界面错误与UI需求不符）</p>\n</li>\n<li><p>trivial级别：轻微缺陷（必输项无提示，或者提示不规范</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.severity(&quot;trivial&quot;)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>with allure.step 分步骤备注</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#@allure.step(&quot;这是两个整数的比较&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change_env</span>(<span class=\"params\">self, env_name</span>):</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">切换环境</span></span><br><span class=\"line\"><span class=\"string\">:param env_name:</span></span><br><span class=\"line\"><span class=\"string\">:return:</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> allure.step(<span class=\"string\">f&#x27;切换环境到: <span class=\"subst\">&#123;env_name&#125;</span>&#x27;</span>):</span><br><span class=\"line\">    self.click(By.XPATH, <span class=\"string\">&quot;//*[contains(@text,&#x27;环境&#x27;)]&quot;</span>)</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;点击切换环境&quot;</span>)</span><br><span class=\"line\">    self.click(By.XPATH, <span class=\"string\">f&quot;//*[@text=&#x27;<span class=\"subst\">&#123;env_name&#125;</span>&#x27;]&quot;</span>)</span><br><span class=\"line\">    log.info(<span class=\"string\">f&quot;切换到:<span class=\"subst\">&#123;env_name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"./step.png\" alt=\"8\"></p>\n</li>\n<li><p>attach 用于向测试报告中输入一些附加的信息，通常是一些测试数据信息。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Attach</span>(<span class=\"params\">object</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, body, name=None, attachment_type=None, extension=None</span>):</span></span><br><span class=\"line\">        plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">file</span>(<span class=\"params\">self, source, name=None, attachment_type=None, extension=None</span>):</span></span><br><span class=\"line\">        plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>name就是附件名称，body就是数据，attachment_type就是传类型</p>\n</li>\n<li><p>附件支持的类型（TEXT，HTML，XML，PNG，JPG，JSON，OTHER）</p>\n</li>\n<li><p>图片附件：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">r&quot;G:\\Web_automation\\Learn_pytest\\test_cases\\img\\2.jpg&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file=file.read()</span><br><span class=\"line\">    allure.attach(file,<span class=\"string\">&quot;预期结果&quot;</span>,attachment_type=allure.attachment_type.JPG)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>issue和testcase 添加链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.testcase(&quot;https://home.cnblogs.com/&quot;,&quot;测试用例地址请点击跳转&quot;)  # 标记代码，你可以指定连接的名字，报告里面就会现在这个名字的连接</span></span><br><span class=\"line\"><span class=\"meta\">@allure.issue(&quot;http://www.baidu.com&quot;)  # 标记代码，哪个写在后，在报告里面就会显示在前面</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>description 和 description_html</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.description(&#x27;xxxx&#x27;)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.description_html(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"mocha-allure-reporter\"><a href=\"#mocha-allure-reporter\" class=\"headerlink\" title=\"mocha-allure-reporter\"></a>mocha-allure-reporter</h2><ul>\n<li>安装依赖包：npm install mocha-allure-reporter</li>\n<li>生成 allure 结果 mocha –reporter mocha-allure-reporter</li>\n<li>生成 allure 报告<ul>\n<li>安装 allure 服务(‘brew install allure’)</li>\n<li>allure generate ./allure-results -o ./allureReport –clean</li>\n<li>allure serve ./allureReport</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"allure-–help\"><a href=\"#allure-–help\" class=\"headerlink\" title=\"allure –help\"></a>allure –help</h2><p>Usage: allure [options] [command] [command options]<br>  Options:<br>    –help<br>      Print commandline help.<br>    -q, –quiet<br>      Switch on the quiet mode.<br>      Default: false<br>    -v, –verbose<br>      Switch on the verbose mode.<br>      Default: false<br>    –version<br>      Print commandline version.<br>      Default: false<br>  Commands:<br>    generate      Generate the report<br>      Usage: generate [options] The directories with allure results<br>        Options:<br>          -c, –clean<br>            Clean Allure report directory before generating a new one.<br>            Default: false<br>          –config<br>            Allure commandline config path. If specified overrides values from<br>            –profile and –configDirectory.<br>          –configDirectory<br>            Allure commandline configurations directory. By default uses<br>            ALLURE_HOME directory.<br>          –profile<br>            Allure commandline configuration profile.<br>          -o, –report-dir, –output<br>            The directory to generate Allure report into.<br>            Default: allure-report</p>\n<pre><code>serve      Serve the report\n  Usage: serve [options] The directories with allure results\n    Options:\n      --config\n        Allure commandline config path. If specified overrides values from \n        --profile and --configDirectory.\n      --configDirectory\n        Allure commandline configurations directory. By default uses \n        ALLURE_HOME directory.\n      -h, --host\n        This host will be used to start web server for the report.\n      -p, --port\n        This port will be used to start web server for the report.\n        Default: 0\n      --profile\n        Allure commandline configuration profile.\n\nopen      Open generated report\n  Usage: open [options] The report directory\n    Options:\n      -h, --host\n        This host will be used to start web server for the report.\n      -p, --port\n        This port will be used to start web server for the report.\n        Default: 0\n\nplugin      Generate the report\n  Usage: plugin [options]\n    Options:\n      --config\n        Allure commandline config path. If specified overrides values from \n        --profile and --configDirectory.\n      --configDirectory\n        Allure commandline configurations directory. By default uses \n        ALLURE_HOME directory.\n      --profile\n        Allure commandline configuration profile.</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Allure\"><a href=\"#Allure\" class=\"headerlink\" title=\"Allure\"></a>Allure</h1><h2 id=\"Allure-pytest\"><a href=\"#Allure-pytest\" class=\"headerlink\" title=\"Allure-pytest\"></a>Allure-pytest</h2><ul>\n<li>生成 allure 结果目录(‘–alluredir’,’../report/allure’)</li>\n<li>生成 allure 报告<ul>\n<li>安装 allure 服务(‘brew install allure’)</li>\n<li>allure generate ./reportallure -o ./allureReport –clean (reportallure是alluredir生成的xml目录，allureReport是最终生成html的目录)</li>\n<li>allure serve ./allureReport (运行后，浏览器会自动跳转到allure report界面)</li>\n</ul>\n</li>\n<li><a href=\"https://www.cnblogs.com/hao2018/p/11135180.html\">pytest+allure+jenkins集成</a></li>\n</ul>\n<h3 id=\"allure-pytest-定制化报告\"><a href=\"#allure-pytest-定制化报告\" class=\"headerlink\" title=\"allure-pytest 定制化报告\"></a>allure-pytest 定制化报告</h3><ol>\n<li><p>parent_suite 最上层测试套</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.parent_suite(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>suite 测试套</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.suite(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sub_suite 下层测试套</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.sub_suite(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>title 下层测试套</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.title(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"./suite.png\" alt=\"1,2,3,4\"></p>\n</li>\n<li><p>feature 标注主要功能模块</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.feature(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"./feature.png\" alt=\"5\"></p>\n</li>\n<li><p>story 标注Features功能模块下的分支功能</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.story(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>severity 标注测试用例的重要级别 (图表优先级)</p>\n<ul>\n<li><p>blocker级别：中断缺陷（客户端程序无响应，无法执行下一步操作）</p>\n</li>\n<li><p>critical级别：临界缺陷（功能点缺失）</p>\n</li>\n<li><p>normal级别：正常    默认为这个级别</p>\n</li>\n<li><p>minor级别：次要缺陷（界面错误与UI需求不符）</p>\n</li>\n<li><p>trivial级别：轻微缺陷（必输项无提示，或者提示不规范</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.severity(&quot;trivial&quot;)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>with allure.step 分步骤备注</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#@allure.step(&quot;这是两个整数的比较&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change_env</span>(<span class=\"params\">self, env_name</span>):</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">切换环境</span></span><br><span class=\"line\"><span class=\"string\">:param env_name:</span></span><br><span class=\"line\"><span class=\"string\">:return:</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> allure.step(<span class=\"string\">f&#x27;切换环境到: <span class=\"subst\">&#123;env_name&#125;</span>&#x27;</span>):</span><br><span class=\"line\">    self.click(By.XPATH, <span class=\"string\">&quot;//*[contains(@text,&#x27;环境&#x27;)]&quot;</span>)</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;点击切换环境&quot;</span>)</span><br><span class=\"line\">    self.click(By.XPATH, <span class=\"string\">f&quot;//*[@text=&#x27;<span class=\"subst\">&#123;env_name&#125;</span>&#x27;]&quot;</span>)</span><br><span class=\"line\">    log.info(<span class=\"string\">f&quot;切换到:<span class=\"subst\">&#123;env_name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p> <img src=\"./step.png\" alt=\"8\"></p>\n</li>\n<li><p>attach 用于向测试报告中输入一些附加的信息，通常是一些测试数据信息。</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Attach</span>(<span class=\"params\">object</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, body, name=None, attachment_type=None, extension=None</span>):</span></span><br><span class=\"line\">        plugin_manager.hook.attach_data(body=body, name=name, attachment_type=attachment_type, extension=extension)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">file</span>(<span class=\"params\">self, source, name=None, attachment_type=None, extension=None</span>):</span></span><br><span class=\"line\">        plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>name就是附件名称，body就是数据，attachment_type就是传类型</p>\n</li>\n<li><p>附件支持的类型（TEXT，HTML，XML，PNG，JPG，JSON，OTHER）</p>\n</li>\n<li><p>图片附件：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">r&quot;G:\\Web_automation\\Learn_pytest\\test_cases\\img\\2.jpg&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file=file.read()</span><br><span class=\"line\">    allure.attach(file,<span class=\"string\">&quot;预期结果&quot;</span>,attachment_type=allure.attachment_type.JPG)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>issue和testcase 添加链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.testcase(&quot;https://home.cnblogs.com/&quot;,&quot;测试用例地址请点击跳转&quot;)  # 标记代码，你可以指定连接的名字，报告里面就会现在这个名字的连接</span></span><br><span class=\"line\"><span class=\"meta\">@allure.issue(&quot;http://www.baidu.com&quot;)  # 标记代码，哪个写在后，在报告里面就会显示在前面</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>description 和 description_html</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@allure.description(&#x27;xxxx&#x27;)</span></span><br><span class=\"line\"><span class=\"meta\">@allure.description_html(&#x27;xxxx&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"mocha-allure-reporter\"><a href=\"#mocha-allure-reporter\" class=\"headerlink\" title=\"mocha-allure-reporter\"></a>mocha-allure-reporter</h2><ul>\n<li>安装依赖包：npm install mocha-allure-reporter</li>\n<li>生成 allure 结果 mocha –reporter mocha-allure-reporter</li>\n<li>生成 allure 报告<ul>\n<li>安装 allure 服务(‘brew install allure’)</li>\n<li>allure generate ./allure-results -o ./allureReport –clean</li>\n<li>allure serve ./allureReport</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"allure-–help\"><a href=\"#allure-–help\" class=\"headerlink\" title=\"allure –help\"></a>allure –help</h2><p>Usage: allure [options] [command] [command options]<br>  Options:<br>    –help<br>      Print commandline help.<br>    -q, –quiet<br>      Switch on the quiet mode.<br>      Default: false<br>    -v, –verbose<br>      Switch on the verbose mode.<br>      Default: false<br>    –version<br>      Print commandline version.<br>      Default: false<br>  Commands:<br>    generate      Generate the report<br>      Usage: generate [options] The directories with allure results<br>        Options:<br>          -c, –clean<br>            Clean Allure report directory before generating a new one.<br>            Default: false<br>          –config<br>            Allure commandline config path. If specified overrides values from<br>            –profile and –configDirectory.<br>          –configDirectory<br>            Allure commandline configurations directory. By default uses<br>            ALLURE_HOME directory.<br>          –profile<br>            Allure commandline configuration profile.<br>          -o, –report-dir, –output<br>            The directory to generate Allure report into.<br>            Default: allure-report</p>\n<pre><code>serve      Serve the report\n  Usage: serve [options] The directories with allure results\n    Options:\n      --config\n        Allure commandline config path. If specified overrides values from \n        --profile and --configDirectory.\n      --configDirectory\n        Allure commandline configurations directory. By default uses \n        ALLURE_HOME directory.\n      -h, --host\n        This host will be used to start web server for the report.\n      -p, --port\n        This port will be used to start web server for the report.\n        Default: 0\n      --profile\n        Allure commandline configuration profile.\n\nopen      Open generated report\n  Usage: open [options] The report directory\n    Options:\n      -h, --host\n        This host will be used to start web server for the report.\n      -p, --port\n        This port will be used to start web server for the report.\n        Default: 0\n\nplugin      Generate the report\n  Usage: plugin [options]\n    Options:\n      --config\n        Allure commandline config path. If specified overrides values from \n        --profile and --configDirectory.\n      --configDirectory\n        Allure commandline configurations directory. By default uses \n        ALLURE_HOME directory.\n      --profile\n        Allure commandline configuration profile.</code></pre>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-10-14T07:16:44.450Z","updated":"2020-10-14T07:16:44.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg949ewr00013c9egekk6kqf","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"jenkins环境搭建","date":"2020-10-14T08:27:27.000Z","_content":"\n# 搭建\n\n\n\n# **1.普通搭建**\n一、 获取安装列表\nyum -y list java*\n二、 安装JDK环境\nyum -y install java\n三、 测试JDK是否安装成功\nJava -version\n四、 下载Jenkins和maven\n查看版本 http://pkg.jenkins-ci.org/redhat-stable/\nwget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\n五、 安装maven\nyum -y install apache-maven\n六、 安装Jenkins\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n七、 修改启动端口\nvim /etc/sysconfig/jenkins\n八、 重启服务\nservice jenkins restart\n九、 查看jenkins密码并复制\nvim /var/lib/jenkins/secrets/initialAdminPassword\n十、 新建凭据\n新建一个凭据，凭据的作用就是让系统于安装的Jenkins形成信任关系，Jenkins才有权限操作本地的项目。\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245369-880bf670-1110-483d-8e5e-a5e08871645c.jpeg#align=left&display=inline&height=550&originHeight=550&originWidth=640&size=0&status=done&style=none&width=640)图 1\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245369-1ed9df19-960c-42d7-91b2-1b0ac7db9819.jpeg#align=left&display=inline&height=286&originHeight=286&originWidth=640&size=0&status=done&style=none&width=640)图 2\n十一、 新建任务\n填写任务名，选择构建一个自由风格的软件项目，选择OK\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245400-8132ffdc-62cc-49df-9568-51364e5fc123.jpeg#align=left&display=inline&height=457&originHeight=457&originWidth=640&size=0&status=done&style=none&width=640)图 3\n十二、 添加Gitlab公钥\n填写公钥处可参考第五章，利用其生成的公钥字符串填在此处即可。\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245377-ec2c2f16-53a5-43d7-b1a9-68d7e8bd170b.jpeg#align=left&display=inline&height=329&originHeight=329&originWidth=640&size=0&status=done&style=none&width=640)图4\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245399-da8e95db-b72a-47a2-a46e-597007ecfa90.jpeg#align=left&display=inline&height=261&originHeight=261&originWidth=640&size=0&status=done&style=none&width=640)图 5\n\n\n# **2.基于Docker安装Jenkins环境**\n# \n \n1.使用docker 安装jenkins\n\n| docker run -p 8080:8080 -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkinsci/blueocean |\n| --- |\n\n2.访问jenkins地址 8080\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170046-777b7890-ed1c-464a-a9eb-21dae4ac334a.png#align=left&display=inline&height=175&originHeight=175&originWidth=366&size=0&status=done&style=none&width=366)\n \n注意：第一次启动的时候正在加载jenkins大概会等待3-10分钟。\n3.解锁jenkins\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170036-cb857c21-66d3-48ad-9176-46af553eee7f.png#align=left&display=inline&height=372&originHeight=372&originWidth=583&size=0&status=done&style=none&width=583)\n \n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170053-73ee0041-9212-4bcd-a7b6-b0e62eb9b66b.png#align=left&display=inline&height=489&originHeight=489&originWidth=693&size=0&status=done&style=none&width=693)\n \ndocker exec -it 7f485bd95c3b  /bin/bash 进入jenkins容器\ncat /var/jenkins_home/secrets/initialAdminPassword\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170028-d3105681-153d-47c9-914a-5a92f9eed907.png#align=left&display=inline&height=448&originHeight=448&originWidth=693&size=0&status=done&style=none&width=693)\n大概需要等待3-10分钟\n创建新的用户\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170131-1d1bd675-a954-4414-81dd-9669298fdb9b.png#align=left&display=inline&height=475&originHeight=475&originWidth=693&size=0&status=done&style=none&width=693)\n \n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170042-6632243e-01cc-4017-9519-2bd102e48766.png#align=left&display=inline&height=375&originHeight=375&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n \n \n## **Jenkins全局工具配置**\n进入到jenkins容器中 echo $JAVA_HOME 获取java环境安装地址\n \n### **JDK环境安装**\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170058-6d044725-8a4f-4ff0-b5fd-4a32c96f2fe7.png#align=left&display=inline&height=218&originHeight=218&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n### **Maven环境安装**\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170037-54eec896-3353-4187-8824-b5a919ef0b21.png#align=left&display=inline&height=289&originHeight=289&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n### **安装Jenkins对应Maven插件**\n找到 “系统管理“ - “安装插件” ，点击 “可选插件”，找到如下maven插件的版本  \n插件名称 [Maven Integration](https://plugins.jenkins.io/maven-plugin)\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170114-a7f2cbe9-1ef3-4db5-9545-0409dd4f570e.png#align=left&display=inline&height=308&originHeight=308&originWidth=693&size=0&status=done&style=none&width=693)\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170059-8100ceb5-3a98-4b8b-a78d-98ad75e8ac66.png#align=left&display=inline&height=488&originHeight=488&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n## **Jenkins实现Springboot项目自动部署**\n\n1. 新建一个发布任务\n\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170102-9bdeff47-e41b-4483-a763-2ce964bb8b58.png#align=left&display=inline&height=318&originHeight=318&originWidth=454&size=0&status=done&style=none&width=454)\n \n\n1. 配置任务git账号密码\n\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170057-1a89b2cb-16e2-4f00-9478-b6f1c1650b5f.png#align=left&display=inline&height=270&originHeight=270&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n   3.项目打包\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170167-8324ff25-ec86-40fa-a0c3-f4bfae684945.png#align=left&display=inline&height=200&originHeight=200&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n   clean install\n\n1. 点击立即构建\n\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170119-c0fbd773-eaf2-4556-a94b-007913000b28.png#align=left&display=inline&height=326&originHeight=326&originWidth=693&size=0&status=done&style=none&width=693)\n \n第一次构建可能耗时比较长，因为需要下载一些相关依赖jar包\n \n## **Jenkins启动成功之后执行shll脚本\n| #!/bin/bash\n#服务名称\nSERVER_NAME=springboot\n# 源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行  \nJAR_NAME=springboot-0.0.1-SNAPSHOT\n# 源jar路径  \n#/usr/local/jenkins_home/workspace--->jenkins 工作目录\n#demo 项目目录\n#target 打包生成jar包的目录\nJAR_PATH=/var/jenkins_home/workspace/springboot/target\n# 打包完成之后，把jar包移动到运行jar包的目录--->work_daemon，work_daemon这个目录需要自己提前创建\nJAR_WORK_PATH=/var/jenkins_home/workspace/springboot/target\n \necho \"查询进程id-->$SERVER_NAME\"\nPID=`ps -ef | grep \"$SERVER_NAME\" | awk '{print $2}'`\necho \"得到进程ID：$PID\"\necho \"结束进程\"\nfor id in $PID\ndo\n\tkill -9 $id  \n\techo \"killed $id\"  \ndone\necho \"结束进程完成\"\n \n#复制jar包到执行目录\necho \"复制jar包到执行目录:cp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH\"\ncp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH\necho \"复制jar包完成\"\ncd $JAR_WORK_PATH\n#修改文件权限\nchmod 755 $JAR_NAME.jar\n \nNohub  java -jar $JAR_NAME.jar |\n| --- |\n\n加**nohub 指的是后台运行**，或者使用**nohub &**\n# **容器映射8081端口**\n1. 重启容器\nsystemctl restart  docker  \n 2. 清空未运行的容器\ndocker rm $(sudo docker ps -a -q)\n\n| docker run -p 8080:8080   -p 8081:8081   -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkinsci/blueocean |\n| --- |\n\ndocker安装需要很多依赖，第一次安装报错信息\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: systemd\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: libsystemd.so.0(LIBSYSTEMD_209)(64bit)\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: libseccomp.so.2()(64bit)\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: container-selinux >= 2:2.74\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: libseccomp >= 2.3\nError: Package: containerd.io-1.2.13-3.1.el7.x86_64 (docker-ce-stable)\nRequires: systemd\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: libsystemd.so.0()(64bit)\nError: Package: containerd.io-1.2.13-3.1.el7.x86_64 (docker-ce-stable)\nRequires: container-selinux >= 2:2.74\nYou could try using --skip-broken to work around the problem\nYou could try running: rpm -Va --nofiles --nodigest\n\n","source":"_posts/jenkins环境搭建.md","raw":"---\ntitle: jenkins环境搭建\ndate: 2020-10-14 16:27:27\ntags:\n---\n\n# 搭建\n\n\n\n# **1.普通搭建**\n一、 获取安装列表\nyum -y list java*\n二、 安装JDK环境\nyum -y install java\n三、 测试JDK是否安装成功\nJava -version\n四、 下载Jenkins和maven\n查看版本 http://pkg.jenkins-ci.org/redhat-stable/\nwget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\n五、 安装maven\nyum -y install apache-maven\n六、 安装Jenkins\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n七、 修改启动端口\nvim /etc/sysconfig/jenkins\n八、 重启服务\nservice jenkins restart\n九、 查看jenkins密码并复制\nvim /var/lib/jenkins/secrets/initialAdminPassword\n十、 新建凭据\n新建一个凭据，凭据的作用就是让系统于安装的Jenkins形成信任关系，Jenkins才有权限操作本地的项目。\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245369-880bf670-1110-483d-8e5e-a5e08871645c.jpeg#align=left&display=inline&height=550&originHeight=550&originWidth=640&size=0&status=done&style=none&width=640)图 1\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245369-1ed9df19-960c-42d7-91b2-1b0ac7db9819.jpeg#align=left&display=inline&height=286&originHeight=286&originWidth=640&size=0&status=done&style=none&width=640)图 2\n十一、 新建任务\n填写任务名，选择构建一个自由风格的软件项目，选择OK\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245400-8132ffdc-62cc-49df-9568-51364e5fc123.jpeg#align=left&display=inline&height=457&originHeight=457&originWidth=640&size=0&status=done&style=none&width=640)图 3\n十二、 添加Gitlab公钥\n填写公钥处可参考第五章，利用其生成的公钥字符串填在此处即可。\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245377-ec2c2f16-53a5-43d7-b1a9-68d7e8bd170b.jpeg#align=left&display=inline&height=329&originHeight=329&originWidth=640&size=0&status=done&style=none&width=640)图4\n![](https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245399-da8e95db-b72a-47a2-a46e-597007ecfa90.jpeg#align=left&display=inline&height=261&originHeight=261&originWidth=640&size=0&status=done&style=none&width=640)图 5\n\n\n# **2.基于Docker安装Jenkins环境**\n# \n \n1.使用docker 安装jenkins\n\n| docker run -p 8080:8080 -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkinsci/blueocean |\n| --- |\n\n2.访问jenkins地址 8080\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170046-777b7890-ed1c-464a-a9eb-21dae4ac334a.png#align=left&display=inline&height=175&originHeight=175&originWidth=366&size=0&status=done&style=none&width=366)\n \n注意：第一次启动的时候正在加载jenkins大概会等待3-10分钟。\n3.解锁jenkins\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170036-cb857c21-66d3-48ad-9176-46af553eee7f.png#align=left&display=inline&height=372&originHeight=372&originWidth=583&size=0&status=done&style=none&width=583)\n \n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170053-73ee0041-9212-4bcd-a7b6-b0e62eb9b66b.png#align=left&display=inline&height=489&originHeight=489&originWidth=693&size=0&status=done&style=none&width=693)\n \ndocker exec -it 7f485bd95c3b  /bin/bash 进入jenkins容器\ncat /var/jenkins_home/secrets/initialAdminPassword\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170028-d3105681-153d-47c9-914a-5a92f9eed907.png#align=left&display=inline&height=448&originHeight=448&originWidth=693&size=0&status=done&style=none&width=693)\n大概需要等待3-10分钟\n创建新的用户\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170131-1d1bd675-a954-4414-81dd-9669298fdb9b.png#align=left&display=inline&height=475&originHeight=475&originWidth=693&size=0&status=done&style=none&width=693)\n \n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170042-6632243e-01cc-4017-9519-2bd102e48766.png#align=left&display=inline&height=375&originHeight=375&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n \n \n## **Jenkins全局工具配置**\n进入到jenkins容器中 echo $JAVA_HOME 获取java环境安装地址\n \n### **JDK环境安装**\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170058-6d044725-8a4f-4ff0-b5fd-4a32c96f2fe7.png#align=left&display=inline&height=218&originHeight=218&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n### **Maven环境安装**\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170037-54eec896-3353-4187-8824-b5a919ef0b21.png#align=left&display=inline&height=289&originHeight=289&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n### **安装Jenkins对应Maven插件**\n找到 “系统管理“ - “安装插件” ，点击 “可选插件”，找到如下maven插件的版本  \n插件名称 [Maven Integration](https://plugins.jenkins.io/maven-plugin)\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170114-a7f2cbe9-1ef3-4db5-9545-0409dd4f570e.png#align=left&display=inline&height=308&originHeight=308&originWidth=693&size=0&status=done&style=none&width=693)\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170059-8100ceb5-3a98-4b8b-a78d-98ad75e8ac66.png#align=left&display=inline&height=488&originHeight=488&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n## **Jenkins实现Springboot项目自动部署**\n\n1. 新建一个发布任务\n\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170102-9bdeff47-e41b-4483-a763-2ce964bb8b58.png#align=left&display=inline&height=318&originHeight=318&originWidth=454&size=0&status=done&style=none&width=454)\n \n\n1. 配置任务git账号密码\n\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170057-1a89b2cb-16e2-4f00-9478-b6f1c1650b5f.png#align=left&display=inline&height=270&originHeight=270&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n   3.项目打包\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170167-8324ff25-ec86-40fa-a0c3-f4bfae684945.png#align=left&display=inline&height=200&originHeight=200&originWidth=693&size=0&status=done&style=none&width=693)\n \n \n   clean install\n\n1. 点击立即构建\n\n![](https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170119-c0fbd773-eaf2-4556-a94b-007913000b28.png#align=left&display=inline&height=326&originHeight=326&originWidth=693&size=0&status=done&style=none&width=693)\n \n第一次构建可能耗时比较长，因为需要下载一些相关依赖jar包\n \n## **Jenkins启动成功之后执行shll脚本\n| #!/bin/bash\n#服务名称\nSERVER_NAME=springboot\n# 源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行  \nJAR_NAME=springboot-0.0.1-SNAPSHOT\n# 源jar路径  \n#/usr/local/jenkins_home/workspace--->jenkins 工作目录\n#demo 项目目录\n#target 打包生成jar包的目录\nJAR_PATH=/var/jenkins_home/workspace/springboot/target\n# 打包完成之后，把jar包移动到运行jar包的目录--->work_daemon，work_daemon这个目录需要自己提前创建\nJAR_WORK_PATH=/var/jenkins_home/workspace/springboot/target\n \necho \"查询进程id-->$SERVER_NAME\"\nPID=`ps -ef | grep \"$SERVER_NAME\" | awk '{print $2}'`\necho \"得到进程ID：$PID\"\necho \"结束进程\"\nfor id in $PID\ndo\n\tkill -9 $id  \n\techo \"killed $id\"  \ndone\necho \"结束进程完成\"\n \n#复制jar包到执行目录\necho \"复制jar包到执行目录:cp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH\"\ncp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH\necho \"复制jar包完成\"\ncd $JAR_WORK_PATH\n#修改文件权限\nchmod 755 $JAR_NAME.jar\n \nNohub  java -jar $JAR_NAME.jar |\n| --- |\n\n加**nohub 指的是后台运行**，或者使用**nohub &**\n# **容器映射8081端口**\n1. 重启容器\nsystemctl restart  docker  \n 2. 清空未运行的容器\ndocker rm $(sudo docker ps -a -q)\n\n| docker run -p 8080:8080   -p 8081:8081   -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkinsci/blueocean |\n| --- |\n\ndocker安装需要很多依赖，第一次安装报错信息\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: systemd\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: libsystemd.so.0(LIBSYSTEMD_209)(64bit)\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: libseccomp.so.2()(64bit)\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: container-selinux >= 2:2.74\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: libseccomp >= 2.3\nError: Package: containerd.io-1.2.13-3.1.el7.x86_64 (docker-ce-stable)\nRequires: systemd\nError: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)\nRequires: libsystemd.so.0()(64bit)\nError: Package: containerd.io-1.2.13-3.1.el7.x86_64 (docker-ce-stable)\nRequires: container-selinux >= 2:2.74\nYou could try using --skip-broken to work around the problem\nYou could try running: rpm -Va --nofiles --nodigest\n\n","slug":"jenkins环境搭建","published":1,"updated":"2020-10-14T08:28:08.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg94xqgr0000d99e2ozb2mgf","content":"<h1 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h1><h1 id=\"1-普通搭建\"><a href=\"#1-普通搭建\" class=\"headerlink\" title=\"1.普通搭建\"></a><strong>1.普通搭建</strong></h1><p>一、 获取安装列表<br>yum -y list java*<br>二、 安装JDK环境<br>yum -y install java<br>三、 测试JDK是否安装成功<br>Java -version<br>四、 下载Jenkins和maven<br>查看版本 <a href=\"http://pkg.jenkins-ci.org/redhat-stable/\">http://pkg.jenkins-ci.org/redhat-stable/</a><br>wget <a href=\"http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo\">http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo</a> -O /etc/yum.repos.d/epel-apache-maven.repo<br>wget <a href=\"http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\">http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</a><br>五、 安装maven<br>yum -y install apache-maven<br>六、 安装Jenkins<br>rpm -ivh jenkins-2.7.3-1.1.noarch.rpm<br>七、 修改启动端口<br>vim /etc/sysconfig/jenkins<br>八、 重启服务<br>service jenkins restart<br>九、 查看jenkins密码并复制<br>vim /var/lib/jenkins/secrets/initialAdminPassword<br>十、 新建凭据<br>新建一个凭据，凭据的作用就是让系统于安装的Jenkins形成信任关系，Jenkins才有权限操作本地的项目。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245369-880bf670-1110-483d-8e5e-a5e08871645c.jpeg#align=left&display=inline&height=550&originHeight=550&originWidth=640&size=0&status=done&style=none&width=640\">图 1<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245369-1ed9df19-960c-42d7-91b2-1b0ac7db9819.jpeg#align=left&display=inline&height=286&originHeight=286&originWidth=640&size=0&status=done&style=none&width=640\">图 2<br>十一、 新建任务<br>填写任务名，选择构建一个自由风格的软件项目，选择OK<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245400-8132ffdc-62cc-49df-9568-51364e5fc123.jpeg#align=left&display=inline&height=457&originHeight=457&originWidth=640&size=0&status=done&style=none&width=640\">图 3<br>十二、 添加Gitlab公钥<br>填写公钥处可参考第五章，利用其生成的公钥字符串填在此处即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245377-ec2c2f16-53a5-43d7-b1a9-68d7e8bd170b.jpeg#align=left&display=inline&height=329&originHeight=329&originWidth=640&size=0&status=done&style=none&width=640\">图4<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245399-da8e95db-b72a-47a2-a46e-597007ecfa90.jpeg#align=left&display=inline&height=261&originHeight=261&originWidth=640&size=0&status=done&style=none&width=640\">图 5</p>\n<h1 id=\"2-基于Docker安装Jenkins环境\"><a href=\"#2-基于Docker安装Jenkins环境\" class=\"headerlink\" title=\"2.基于Docker安装Jenkins环境\"></a><strong>2.基于Docker安装Jenkins环境</strong></h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><p> <br>1.使用docker 安装jenkins</p>\n<table>\n<thead>\n<tr>\n<th>docker run -p 8080:8080 -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkinsci/blueocean</th>\n</tr>\n</thead>\n</table>\n<p>2.访问jenkins地址 8080<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170046-777b7890-ed1c-464a-a9eb-21dae4ac334a.png#align=left&display=inline&height=175&originHeight=175&originWidth=366&size=0&status=done&style=none&width=366\"><br> <br>注意：第一次启动的时候正在加载jenkins大概会等待3-10分钟。<br>3.解锁jenkins<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170036-cb857c21-66d3-48ad-9176-46af553eee7f.png#align=left&display=inline&height=372&originHeight=372&originWidth=583&size=0&status=done&style=none&width=583\"><br> <br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170053-73ee0041-9212-4bcd-a7b6-b0e62eb9b66b.png#align=left&display=inline&height=489&originHeight=489&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br>docker exec -it 7f485bd95c3b  /bin/bash 进入jenkins容器<br>cat /var/jenkins_home/secrets/initialAdminPassword<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170028-d3105681-153d-47c9-914a-5a92f9eed907.png#align=left&display=inline&height=448&originHeight=448&originWidth=693&size=0&status=done&style=none&width=693\"><br>大概需要等待3-10分钟<br>创建新的用户<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170131-1d1bd675-a954-4414-81dd-9669298fdb9b.png#align=left&display=inline&height=475&originHeight=475&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170042-6632243e-01cc-4017-9519-2bd102e48766.png#align=left&display=inline&height=375&originHeight=375&originWidth=693&size=0&status=done&style=none&width=693\">\n \n \n \n </p>\n<h2 id=\"Jenkins全局工具配置\"><a href=\"#Jenkins全局工具配置\" class=\"headerlink\" title=\"Jenkins全局工具配置\"></a><strong>Jenkins全局工具配置</strong></h2><p>进入到jenkins容器中 echo $JAVA_HOME 获取java环境安装地址\n </p>\n<h3 id=\"JDK环境安装\"><a href=\"#JDK环境安装\" class=\"headerlink\" title=\"JDK环境安装\"></a><strong>JDK环境安装</strong></h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170058-6d044725-8a4f-4ff0-b5fd-4a32c96f2fe7.png#align=left&display=inline&height=218&originHeight=218&originWidth=693&size=0&status=done&style=none&width=693\">\n \n </p>\n<h3 id=\"Maven环境安装\"><a href=\"#Maven环境安装\" class=\"headerlink\" title=\"Maven环境安装\"></a><strong>Maven环境安装</strong></h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170037-54eec896-3353-4187-8824-b5a919ef0b21.png#align=left&display=inline&height=289&originHeight=289&originWidth=693&size=0&status=done&style=none&width=693\">\n \n </p>\n<h3 id=\"安装Jenkins对应Maven插件\"><a href=\"#安装Jenkins对应Maven插件\" class=\"headerlink\" title=\"安装Jenkins对应Maven插件\"></a><strong>安装Jenkins对应Maven插件</strong></h3><p>找到 “系统管理“ - “安装插件” ，点击 “可选插件”，找到如下maven插件的版本  <br>插件名称 <a href=\"https://plugins.jenkins.io/maven-plugin\">Maven Integration</a><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170114-a7f2cbe9-1ef3-4db5-9545-0409dd4f570e.png#align=left&display=inline&height=308&originHeight=308&originWidth=693&size=0&status=done&style=none&width=693\"><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170059-8100ceb5-3a98-4b8b-a78d-98ad75e8ac66.png#align=left&display=inline&height=488&originHeight=488&originWidth=693&size=0&status=done&style=none&width=693\">\n \n </p>\n<h2 id=\"Jenkins实现Springboot项目自动部署\"><a href=\"#Jenkins实现Springboot项目自动部署\" class=\"headerlink\" title=\"Jenkins实现Springboot项目自动部署\"></a><strong>Jenkins实现Springboot项目自动部署</strong></h2><ol>\n<li>新建一个发布任务</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170102-9bdeff47-e41b-4483-a763-2ce964bb8b58.png#align=left&display=inline&height=318&originHeight=318&originWidth=454&size=0&status=done&style=none&width=454\">\n </p>\n<ol>\n<li>配置任务git账号密码</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170057-1a89b2cb-16e2-4f00-9478-b6f1c1650b5f.png#align=left&display=inline&height=270&originHeight=270&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br> <br>   3.项目打包<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170167-8324ff25-ec86-40fa-a0c3-f4bfae684945.png#align=left&display=inline&height=200&originHeight=200&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br> <br>   clean install</p>\n<ol>\n<li>点击立即构建</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170119-c0fbd773-eaf2-4556-a94b-007913000b28.png#align=left&display=inline&height=326&originHeight=326&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br>第一次构建可能耗时比较长，因为需要下载一些相关依赖jar包\n </p>\n<h2 id=\"Jenkins启动成功之后执行shll脚本\"><a href=\"#Jenkins启动成功之后执行shll脚本\" class=\"headerlink\" title=\"**Jenkins启动成功之后执行shll脚本\"></a>**Jenkins启动成功之后执行shll脚本</h2><p>| #!/bin/bash<br>#服务名称<br>SERVER_NAME=springboot</p>\n<h1 id=\"源jar路径-mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java-jar-命令执行\"><a href=\"#源jar路径-mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java-jar-命令执行\" class=\"headerlink\" title=\"源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行  \"></a>源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行  </h1><p>JAR_NAME=springboot-0.0.1-SNAPSHOT</p>\n<h1 id=\"源jar路径\"><a href=\"#源jar路径\" class=\"headerlink\" title=\"源jar路径  \"></a>源jar路径  </h1><p>#/usr/local/jenkins_home/workspace—&gt;jenkins 工作目录<br>#demo 项目目录<br>#target 打包生成jar包的目录<br>JAR_PATH=/var/jenkins_home/workspace/springboot/target</p>\n<h1 id=\"打包完成之后，把jar包移动到运行jar包的目录—-gt-work-daemon，work-daemon这个目录需要自己提前创建\"><a href=\"#打包完成之后，把jar包移动到运行jar包的目录—-gt-work-daemon，work-daemon这个目录需要自己提前创建\" class=\"headerlink\" title=\"打包完成之后，把jar包移动到运行jar包的目录—&gt;work_daemon，work_daemon这个目录需要自己提前创建\"></a>打包完成之后，把jar包移动到运行jar包的目录—&gt;work_daemon，work_daemon这个目录需要自己提前创建</h1><p>JAR_WORK_PATH=/var/jenkins_home/workspace/springboot/target<br> <br>echo “查询进程id–&gt;$SERVER_NAME”<br>PID=<code>ps -ef | grep &quot;$SERVER_NAME&quot; | awk &#39;&#123;print $2&#125;&#39;</code><br>echo “得到进程ID：$PID”<br>echo “结束进程”<br>for id in $PID<br>do<br>    kill -9 $id  <br>    echo “killed $id”  <br>done<br>echo “结束进程完成”<br> <br>#复制jar包到执行目录<br>echo “复制jar包到执行目录:cp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH”<br>cp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH<br>echo “复制jar包完成”<br>cd $JAR_WORK_PATH<br>#修改文件权限<br>chmod 755 $JAR_NAME.jar<br> <br>Nohub  java -jar $JAR_NAME.jar |<br>| — |</p>\n<p>加<strong>nohub 指的是后台运行</strong>，或者使用<strong>nohub &amp;</strong></p>\n<h1 id=\"容器映射8081端口\"><a href=\"#容器映射8081端口\" class=\"headerlink\" title=\"容器映射8081端口\"></a><strong>容器映射8081端口</strong></h1><ol>\n<li>重启容器<br>systemctl restart  docker  <br> 2. 清空未运行的容器<br>docker rm $(sudo docker ps -a -q)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>docker run -p 8080:8080   -p 8081:8081   -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkinsci/blueocean</th>\n</tr>\n</thead>\n</table>\n<p>docker安装需要很多依赖，第一次安装报错信息<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: systemd<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: libsystemd.so.0(LIBSYSTEMD_209)(64bit)<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: libseccomp.so.2()(64bit)<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: container-selinux &gt;= 2:2.74<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: libseccomp &gt;= 2.3<br>Error: Package: containerd.io-1.2.13-3.1.el7.x86_64 (docker-ce-stable)<br>Requires: systemd<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: libsystemd.so.0()(64bit)<br>Error: Package: containerd.io-1.2.13-3.1.el7.x86_64 (docker-ce-stable)<br>Requires: container-selinux &gt;= 2:2.74<br>You could try using –skip-broken to work around the problem<br>You could try running: rpm -Va –nofiles –nodigest</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h1><h1 id=\"1-普通搭建\"><a href=\"#1-普通搭建\" class=\"headerlink\" title=\"1.普通搭建\"></a><strong>1.普通搭建</strong></h1><p>一、 获取安装列表<br>yum -y list java*<br>二、 安装JDK环境<br>yum -y install java<br>三、 测试JDK是否安装成功<br>Java -version<br>四、 下载Jenkins和maven<br>查看版本 <a href=\"http://pkg.jenkins-ci.org/redhat-stable/\">http://pkg.jenkins-ci.org/redhat-stable/</a><br>wget <a href=\"http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo\">http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo</a> -O /etc/yum.repos.d/epel-apache-maven.repo<br>wget <a href=\"http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\">http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</a><br>五、 安装maven<br>yum -y install apache-maven<br>六、 安装Jenkins<br>rpm -ivh jenkins-2.7.3-1.1.noarch.rpm<br>七、 修改启动端口<br>vim /etc/sysconfig/jenkins<br>八、 重启服务<br>service jenkins restart<br>九、 查看jenkins密码并复制<br>vim /var/lib/jenkins/secrets/initialAdminPassword<br>十、 新建凭据<br>新建一个凭据，凭据的作用就是让系统于安装的Jenkins形成信任关系，Jenkins才有权限操作本地的项目。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245369-880bf670-1110-483d-8e5e-a5e08871645c.jpeg#align=left&display=inline&height=550&originHeight=550&originWidth=640&size=0&status=done&style=none&width=640\">图 1<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245369-1ed9df19-960c-42d7-91b2-1b0ac7db9819.jpeg#align=left&display=inline&height=286&originHeight=286&originWidth=640&size=0&status=done&style=none&width=640\">图 2<br>十一、 新建任务<br>填写任务名，选择构建一个自由风格的软件项目，选择OK<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245400-8132ffdc-62cc-49df-9568-51364e5fc123.jpeg#align=left&display=inline&height=457&originHeight=457&originWidth=640&size=0&status=done&style=none&width=640\">图 3<br>十二、 添加Gitlab公钥<br>填写公钥处可参考第五章，利用其生成的公钥字符串填在此处即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245377-ec2c2f16-53a5-43d7-b1a9-68d7e8bd170b.jpeg#align=left&display=inline&height=329&originHeight=329&originWidth=640&size=0&status=done&style=none&width=640\">图4<br><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/467788/1586258245399-da8e95db-b72a-47a2-a46e-597007ecfa90.jpeg#align=left&display=inline&height=261&originHeight=261&originWidth=640&size=0&status=done&style=none&width=640\">图 5</p>\n<h1 id=\"2-基于Docker安装Jenkins环境\"><a href=\"#2-基于Docker安装Jenkins环境\" class=\"headerlink\" title=\"2.基于Docker安装Jenkins环境\"></a><strong>2.基于Docker安装Jenkins环境</strong></h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><p> <br>1.使用docker 安装jenkins</p>\n<table>\n<thead>\n<tr>\n<th>docker run -p 8080:8080 -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkinsci/blueocean</th>\n</tr>\n</thead>\n</table>\n<p>2.访问jenkins地址 8080<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170046-777b7890-ed1c-464a-a9eb-21dae4ac334a.png#align=left&display=inline&height=175&originHeight=175&originWidth=366&size=0&status=done&style=none&width=366\"><br> <br>注意：第一次启动的时候正在加载jenkins大概会等待3-10分钟。<br>3.解锁jenkins<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170036-cb857c21-66d3-48ad-9176-46af553eee7f.png#align=left&display=inline&height=372&originHeight=372&originWidth=583&size=0&status=done&style=none&width=583\"><br> <br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170053-73ee0041-9212-4bcd-a7b6-b0e62eb9b66b.png#align=left&display=inline&height=489&originHeight=489&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br>docker exec -it 7f485bd95c3b  /bin/bash 进入jenkins容器<br>cat /var/jenkins_home/secrets/initialAdminPassword<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170028-d3105681-153d-47c9-914a-5a92f9eed907.png#align=left&display=inline&height=448&originHeight=448&originWidth=693&size=0&status=done&style=none&width=693\"><br>大概需要等待3-10分钟<br>创建新的用户<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170131-1d1bd675-a954-4414-81dd-9669298fdb9b.png#align=left&display=inline&height=475&originHeight=475&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170042-6632243e-01cc-4017-9519-2bd102e48766.png#align=left&display=inline&height=375&originHeight=375&originWidth=693&size=0&status=done&style=none&width=693\">\n \n \n \n </p>\n<h2 id=\"Jenkins全局工具配置\"><a href=\"#Jenkins全局工具配置\" class=\"headerlink\" title=\"Jenkins全局工具配置\"></a><strong>Jenkins全局工具配置</strong></h2><p>进入到jenkins容器中 echo $JAVA_HOME 获取java环境安装地址\n </p>\n<h3 id=\"JDK环境安装\"><a href=\"#JDK环境安装\" class=\"headerlink\" title=\"JDK环境安装\"></a><strong>JDK环境安装</strong></h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170058-6d044725-8a4f-4ff0-b5fd-4a32c96f2fe7.png#align=left&display=inline&height=218&originHeight=218&originWidth=693&size=0&status=done&style=none&width=693\">\n \n </p>\n<h3 id=\"Maven环境安装\"><a href=\"#Maven环境安装\" class=\"headerlink\" title=\"Maven环境安装\"></a><strong>Maven环境安装</strong></h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170037-54eec896-3353-4187-8824-b5a919ef0b21.png#align=left&display=inline&height=289&originHeight=289&originWidth=693&size=0&status=done&style=none&width=693\">\n \n </p>\n<h3 id=\"安装Jenkins对应Maven插件\"><a href=\"#安装Jenkins对应Maven插件\" class=\"headerlink\" title=\"安装Jenkins对应Maven插件\"></a><strong>安装Jenkins对应Maven插件</strong></h3><p>找到 “系统管理“ - “安装插件” ，点击 “可选插件”，找到如下maven插件的版本  <br>插件名称 <a href=\"https://plugins.jenkins.io/maven-plugin\">Maven Integration</a><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170114-a7f2cbe9-1ef3-4db5-9545-0409dd4f570e.png#align=left&display=inline&height=308&originHeight=308&originWidth=693&size=0&status=done&style=none&width=693\"><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170059-8100ceb5-3a98-4b8b-a78d-98ad75e8ac66.png#align=left&display=inline&height=488&originHeight=488&originWidth=693&size=0&status=done&style=none&width=693\">\n \n </p>\n<h2 id=\"Jenkins实现Springboot项目自动部署\"><a href=\"#Jenkins实现Springboot项目自动部署\" class=\"headerlink\" title=\"Jenkins实现Springboot项目自动部署\"></a><strong>Jenkins实现Springboot项目自动部署</strong></h2><ol>\n<li>新建一个发布任务</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170102-9bdeff47-e41b-4483-a763-2ce964bb8b58.png#align=left&display=inline&height=318&originHeight=318&originWidth=454&size=0&status=done&style=none&width=454\">\n </p>\n<ol>\n<li>配置任务git账号密码</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170057-1a89b2cb-16e2-4f00-9478-b6f1c1650b5f.png#align=left&display=inline&height=270&originHeight=270&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br> <br>   3.项目打包<br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170167-8324ff25-ec86-40fa-a0c3-f4bfae684945.png#align=left&display=inline&height=200&originHeight=200&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br> <br>   clean install</p>\n<ol>\n<li>点击立即构建</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/467788/1586258170119-c0fbd773-eaf2-4556-a94b-007913000b28.png#align=left&display=inline&height=326&originHeight=326&originWidth=693&size=0&status=done&style=none&width=693\"><br> <br>第一次构建可能耗时比较长，因为需要下载一些相关依赖jar包\n </p>\n<h2 id=\"Jenkins启动成功之后执行shll脚本\"><a href=\"#Jenkins启动成功之后执行shll脚本\" class=\"headerlink\" title=\"**Jenkins启动成功之后执行shll脚本\"></a>**Jenkins启动成功之后执行shll脚本</h2><p>| #!/bin/bash<br>#服务名称<br>SERVER_NAME=springboot</p>\n<h1 id=\"源jar路径-mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java-jar-命令执行\"><a href=\"#源jar路径-mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java-jar-命令执行\" class=\"headerlink\" title=\"源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行  \"></a>源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行  </h1><p>JAR_NAME=springboot-0.0.1-SNAPSHOT</p>\n<h1 id=\"源jar路径\"><a href=\"#源jar路径\" class=\"headerlink\" title=\"源jar路径  \"></a>源jar路径  </h1><p>#/usr/local/jenkins_home/workspace—&gt;jenkins 工作目录<br>#demo 项目目录<br>#target 打包生成jar包的目录<br>JAR_PATH=/var/jenkins_home/workspace/springboot/target</p>\n<h1 id=\"打包完成之后，把jar包移动到运行jar包的目录—-gt-work-daemon，work-daemon这个目录需要自己提前创建\"><a href=\"#打包完成之后，把jar包移动到运行jar包的目录—-gt-work-daemon，work-daemon这个目录需要自己提前创建\" class=\"headerlink\" title=\"打包完成之后，把jar包移动到运行jar包的目录—&gt;work_daemon，work_daemon这个目录需要自己提前创建\"></a>打包完成之后，把jar包移动到运行jar包的目录—&gt;work_daemon，work_daemon这个目录需要自己提前创建</h1><p>JAR_WORK_PATH=/var/jenkins_home/workspace/springboot/target<br> <br>echo “查询进程id–&gt;$SERVER_NAME”<br>PID=<code>ps -ef | grep &quot;$SERVER_NAME&quot; | awk &#39;&#123;print $2&#125;&#39;</code><br>echo “得到进程ID：$PID”<br>echo “结束进程”<br>for id in $PID<br>do<br>    kill -9 $id  <br>    echo “killed $id”  <br>done<br>echo “结束进程完成”<br> <br>#复制jar包到执行目录<br>echo “复制jar包到执行目录:cp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH”<br>cp $JAR_PATH/$JAR_NAME.jar $JAR_WORK_PATH<br>echo “复制jar包完成”<br>cd $JAR_WORK_PATH<br>#修改文件权限<br>chmod 755 $JAR_NAME.jar<br> <br>Nohub  java -jar $JAR_NAME.jar |<br>| — |</p>\n<p>加<strong>nohub 指的是后台运行</strong>，或者使用<strong>nohub &amp;</strong></p>\n<h1 id=\"容器映射8081端口\"><a href=\"#容器映射8081端口\" class=\"headerlink\" title=\"容器映射8081端口\"></a><strong>容器映射8081端口</strong></h1><ol>\n<li>重启容器<br>systemctl restart  docker  <br> 2. 清空未运行的容器<br>docker rm $(sudo docker ps -a -q)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>docker run -p 8080:8080   -p 8081:8081   -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkinsci/blueocean</th>\n</tr>\n</thead>\n</table>\n<p>docker安装需要很多依赖，第一次安装报错信息<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: systemd<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: libsystemd.so.0(LIBSYSTEMD_209)(64bit)<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: libseccomp.so.2()(64bit)<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: container-selinux &gt;= 2:2.74<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: libseccomp &gt;= 2.3<br>Error: Package: containerd.io-1.2.13-3.1.el7.x86_64 (docker-ce-stable)<br>Requires: systemd<br>Error: Package: 3:docker-ce-19.03.8-3.el7.x86_64 (docker-ce-stable)<br>Requires: libsystemd.so.0()(64bit)<br>Error: Package: containerd.io-1.2.13-3.1.el7.x86_64 (docker-ce-stable)<br>Requires: container-selinux &gt;= 2:2.74<br>You could try using –skip-broken to work around the problem<br>You could try running: rpm -Va –nofiles –nodigest</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}